





'================   STARTING THE ELEVATOR SYSTEM  ================'
SEQUENCE engineStartup


        SET column TO nbrOfColumn
        SET elevatorPerColumn TO numberOfElevatorPerColumn
        SET nbrTotalElevator TO column COMPUTE numberOfElevatorPerColumn

        CALL column USING nbrOfColumn,numberOfElevatorPerColumn
        

        SET waiting TO TRUE


        WHILE waiting

            IF btnID NOT EQUAL NULL THEN

                CALL btnPressed WITH btnID
                SET waiting TO FALSE
            END IF


        ENDWHILE
        
   

END DEFINE


'================   ASSIGNE RESPECTIVE FLOORS TO EACH COLUMN    ================'

DEFINE column USING nbrOfColumn,numberOfElevatorPerColumn

            SET x TO 0
            FOR EACH column IN nbrOfColumn
                    'ADD the elevators available to the column'
                    
                    
                            INCREMENT X
                            SET y TO 0
                            FOR EACH elevator in elevatorPerColumn
                                INCREMENT y



                                PUSH elevator WITH y TO column WITH x 'HERE WE CREATE ELEVATOR IN THE COLUMNS'

                                'HERE WE SET THE ELEVATOR PARAMETERS'
                                IF elevator.status WITH  y NOT EQUAL maintenance THEN

                                SET elevator.stauts WITH y TO idle
                            
                                CALL closeDoor WITH elevatorID

                                END IF
                                

                            ENDFOR


                ENDFOR

            'OUTPUT:    
            '           column[0] = [0,1] Elevators


END DEFINE




'================   FUNCTION THAT CREATES ELEVATOR OBJECT AND HANDLE THEIR PARAMATERS   ================'
DEFINE elevator USING elevatorStatus,elevatorDirection,doorStatus,elevatorID
 SET elevator.id TO elevatorID
 SET elevator.status TO elevatorStatus
 SET elevator.direction TO elevatorDirection
 SET elevator.door TO doorStatus
 SET elevator.weight TO elevatorWeight
 

END DEFINE





'================   BUTTON LISTENER FUNCTION EVERY TIME THERE IS AN INPUT  ================'
SEQUENCE btnPressed USING mainBtnID

    CASE mainBtnID
        UP: SET direction to UP
        DOWN: SET direction TO DOWN
        EMEREGENCY: CALL EMEREGENCY 'Personal Adjustmenet : IT Stops the elevator and Call Emeergency'
    ENDCASE


    SET floorRequestedFrom TO floorNumber
    
    'Select The Elevator Available'
    CALL selectElevator with mainBtnID,floorRequestedFrom returning elevatorID

    'Add The floor to queue of that elevator and sort it the way that it's in order'
    CALL elevatorqueue with elevatorID, floorRequestedFrom

    'Make that elevator move'
    CALL elevatorMove WITH elevatorQueue,elevatorID

    'Bring Back the elevator to Idle Status and back to lobby'
    CALL reset WITH elevatorID

END SEQUENCE



'================   FUNCTION THAT SELECT THE NEAREST ELEVATOR    ================'

SEQUENCE selectElevator USING mainBtnID,floorRequestedFrom

SET elevator TO null


'We Go through the array of elevator and the closest one'

FOR each elevator in nbrTotalElevator

    IF elevator.status WITH elevatorID NOT EQUAL MOVING or elevator.direction WITH elevatorID EQUAL mainBtnID THEN
            
                STORE elevator IN elevator.Id
                SET nearestElevator TO 0
                IF elevatorID < 1 THEN
                    SET difference EQUAL floorRequestedFrom MINUS elevator.position WITH elevatorID
                    IF difference EQUAL 0 THEN

                        return elevatorID

                    ELSE IF difference > nearestElevator AND difference <= ABSTRACT(nearestElevator) THEN
                        
                        return elevatorID

                    ELSE IF difference < nearestElevator AND NEGATIF difference <= ABSTRACT(nearestElevator) THEN
                        
                        return elevatorID

                

                    END IF
    END iF
  

    END IF
END FOR

END SEQUENCE


'================ ADD EVERY NEW REQUEST TO THE SELECTED ELEVATOR AND SORT IT THE WAY THE ELEVATOR PROCESS THEM IN ORDER ================'
SEQUENCE elevatorQueue USING elevatorID,floorRequestedFrom

        ADD floorRequestedFrom TO elvQueue

        SORT elvQueue

        return elvQueue
END SEQUENCE



'================   FUNCTION THAT CONTROLS THE MOVEMENT OF THE ELEVATOR  ================'
SEQUENCE elevatorMove USING  elevatorDestination,elevatorID

    FOR EACH destination IN elevatorDestination


        ' Change Status of the elevator '
        SET elevator.status  WITH elevatorID TO MOVING
        ' Get the actual position of the elevator '
        SET actPosition TO elevator.position WITH elevatorID

        'Condition to decide wheter elevator must go up or down'
        IF actPosition > destination THEN

            REPEAT

                DECREASE elevator.position WITH elevatorID

            UNTIL actPosition EQUAL destination

        ELSE IF actPosition < destination THEN
            
            REPEAT

                INCREMENT elevator.position WITH elevatorID

            UNTIL actPosition EQUAL destination
            

        END IF


        POP elevatorDestination 'SINCE WE REACHED THE FIRST DESTINATION IN THE INDEX WE TAKE IT OF'
        CALL doorOpen WITH elevatorID

        'This argumeent get the floor input from user and add to the actual queue'
        'Make an ongoing loop for that elevator until there is no more request on the way'
        PUSH CALL waitForDestination WITH elevatorID returning destination TO elevatorDestination
        SORT elevatorDestination 

      
    END FOR

    

END SEQUENCE



'================   FUNCTION THAT WAIT FOR THE DESTINATION INPUT    ================'
SEQUENCE waitForDestination USING elevatorID

        SET waiting TO TRUE
            WHILE waiting 
                'IF the persone try to go opposite direction that he requested the elevator for'
                IF floorNumber NOT EQUAL NULL THEN
                    IF floorNumber > elevator.position WITH elevatorID AND elevator.direction WITH elevatorID EQUAL DOWN THEN

                        PRINT "THIS ELEVATOR GOING DOWN"

                    ELSE IF floorNumber < elevator.position WITH elevatorID AND elevator.direction WITH elevatorID EQUAL UP THEN

                        PRINT "THIS ELEVATOR GOING UP"

                    ELSE

                        return floorNumber

                    END IF

                END IF

            END WHILE



END SEQUENCE



'================   FUNCTION THAT OPEN THE ELEVATOR DOOR   ================'
SEQUENCE doorOpen USING elevatorID
    
    SET elevator.door WITH elevatorID TO OPEN

    CALL doorSensor WITH elevatorID
    
    CALL doorClose WITH elevatorID

END SEQUENCE





'================   FUNCTION THAT RETURN THE WEIGHT OF THE ELEVATOR  ================'
SEQUENCE doorSensor USING elevatorID

    
    SET elevator.weight WITH elevatorID TO 0
    SET seconds TO 0
    SET waiting TO TRUE
    WHILE waiting

        INCREMENT seconds
        if elevator.weight WITH elevatorID HAS CHANGED THEN

            SET elevator.weight WITH elevatorID TO NEW ELEVATOR WEIGHT

        END IF

        IF seconds EQUAL 10 THEN
            SET waiting TO FALSE
        ENDIF

    END WHILE




END SEQUENCE




'================   FUNCTION THAT CLOSE THE DOOR AND VERIFY THE WIGHT CONDITION  ================'
SEQUENCE doorClose USING elevatorID

    SET maxWeight TO 110 'KG'


    WHILE maxWeight > elevator.wight WITH elevatorID

        PRINT "MAXIMUM WEIGHT HAS REACHED, ELEVATOR WON'T MOVE"



    END WHILE

    SET elevator.door WITH elevatorID TO CLOSE

END SEQUENCE





'===== Function That put the elvevator to rest after it reachs all it destination'

SEQUENCE reset USING elevatorID

    SET elvLobby TO 0
    FOR EACH elevator IN elevatorList

        IF elevator.positon WITH elevatorID EQUAL 0 THEN

            INCREMENT elvLobby

        END IF


    END FOR

    IF elvLobby EQUAL 0 THEN

            CALL elevatorMove WITH 0

            SET elevator.status WITH elevatorID TO idle
            

    ELSE

             SET elevator.status WITH elevatorID TO idle


    END IF




DEFINE