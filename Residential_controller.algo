






'===== Starting The Elevators Setting them to default: IDLE'
SEQUENCE engineStartup

    SET column TO 1


    'ADD the elevators available to the column'
    SET x TO 0
    
    FOR EACH elevator in elevatorList
        INCREMENT x
        SET elevatorID to x
        PUSH elvator TO column
        IF elevator NOT EQUAL maintenance THEN
            
            SET elevator TO idle
            
            CALL closeDoor()

        END IF
    END FOR



END DEFINE




'==== WHEN A BUTTON INPUT=====   '
SEQUENCE btnPressed
    CASE mainBtnID
        UP: SET direction to UP
        DOWN: SET direction TO DOWN
        EMEREGENCY: call EMEREGENCY() 'Personal Adjustmenet : IT Stops the elevator and Call Emeergency'
    ENDCASE


    SET floorRequestedFrom TO floorNumber

    'Select The Elevator Available'
    CALL selectElevator with mainBtnID,floorRequestedFrom returning elevatorID

    'Add The floor to queue of that elevator and sort it the way that it's in order'
    CALL elevatorqueue with elevatorID, floorRequestedFrom

    'Make that elevator move'
    CALL elevator.move with elevatorQueue

    'Bring Back the elevator to Idle Status and back to lobby'
    CALL reset with elevatorID

END SEQUENCE



'====  Function that select available Elevator'

SEQUENCE selectElevator USING mainBtnID,floorRequestedFrom

SET elevator TO null


'We Go through the array of elevator and the closest one'

FOR each elevator in elevatorList

    IF elevator.status() NOT EQUAL MOVING or elevator.direction() NOT EQUAL mainBtnID THEN
            
                STORE elevator IN elevatorId
                SET nearestElevator TO 0
                IF elevatorID < 1 THEN
                    SET difference EQUAL floorRequestedFrom MINUS elevator.position()
                    IF difference EQUAL 0 THEN

                        return elevatorID

                    ELSE IF difference > nearestElevator AND difference <= ABSTRACT(nearestElevator) THEN
                        
                        return elevatorID

                    ELSE IF difference < nearestElevator AND NEGATIF difference <= ABSTRACT(nearestElevator) THEN
                        
                        return elevatorID

                

                    END IF
    END iF
  

    END IF
END FOR

END SEQUENCE


'Add every new inut to the requested Elevator Queue'
SEQUENCE elevatorQueue USING elevatorID,floorRequestedFrom

        ADD floorRequestedFrom TO elvQueue

        SORT elvQueue


END SEQUENCE



'====  Function that control the movement of the elvator  ===='
SEQUENCE elevatorMove with elevatorDestination

    FOR EACH elevatorDestination


        ' Change Status of the elevator '
        SET elevator.status TO MOVING
        ' Get the actual position of the elevator '
        SET actPostion TO elevator.position()

        'Condition to decide wheter elevator must go up or down'
        IF actPostion > elevatorDestination THEN

            REPEAT

                DECREASE elevator.position()

            UNTIL actPostion EQUAL elevatorDestination

        ELSE IF actPostion < elevatorDestination THEN
            
            REPEAT floor IN floorlist

                INCREMENT elevator.position()

            UNTIL actPostion EQUAL elevatorDestination
            

        END IF


        POP elevatorDestination 'SINCE WE REACHED THE FIRST DESTINATION IN THE INDEX WE TAKE IT OF'
        CALL doorOpen()

        'This argumeent get the floor input from user and add to the actual queue'
        'Make an ongoing loop for that elevator until there is no more request on the way'
        PUSH waitForDestination() returning destination TO elevatorDestination
        SORT elevatorDestination 
        
    END FOR

    

END SEQUENCE



'====   Function that waits for user input (Destination) ====''
SEQUENCE waitForDestination()

        SET waiting TO TRUE
            WHILE waiting 
                'IF the persone try to go opposite direction that he requested the elevator for'
                IF floorNumber NOT EQUAL NULL THEN
                    IF floorNumber > elevator.position() AND elevator.direction EQUAL DOWN THEN

                        PRINT "THIS ELEVATOR GOING DOWN"

                    ELSE IF floorNumber < elevator.position() AND elevator.direction EQUAL UP THEN

                        PRINT "THIS ELEVATOR GOING UP"

                    ELSE

                        return floorNumber

                    END IF

                END IF

            END WHILE



END SEQUENCE


'===    Function That opens the door    ===='
SEQUENCE doorOpen()
    
    SET elevator.door() TO OPEN
    CALL doorSensor() 
    
    CALL doorClose()

END SEQUENCE
'RETURN THE WIGHT OF THE ELEVATOR''
SEQUENCE doorSensor()

    
    SET elevator.weight TO 0
    SET seconds TO 0
    SET waiting TO TRUE
    WHILE waiting

        INCREMENT seconds
        if elevator.weight HAS CHANGED THEN

            SET elevator.weight TO NEW elevator WEIGHT

        END IF



    END WHILE




END SEQUENCE




'==== Function That Close the door with a weight condition'
SEQUENCE doorClose()

    SET maxWeight TO 110 'KG'


    WHILE maxWeight > elevator.wight() 

        PRINT "MAXIMUM WEIGHT HAS REACHED, ELEVATOR WON'T MOVE"



    END WHILE

    SET elevator.door() TO CLOSE

END SEQUENCE


'==== Function that creates the elevator and handles them'
DEFINE elevator USING elevatorStatus,elevatorDirection,doorStatus,elevatorID
 SET elevatorID TO elevatorID
 SET elevator.status TO elevatorStatus
 SET elevator.direction TO elevatorDirection
 SET elevator.door TO doorStatus
 SET elevator.weight TO elevatorWeight
 

END DEFINE


'===== Function That put the elvevator to rest after it reachs all it destination'

SEQUENCE reset USING elevatorID

    SET elvLobby TO 0
    FOR EACH elevator IN elevatorList

        IF elevator.positon EQUAL 0 THEN

            INCREMENT elvLobby

        END IF


    END FOR

    IF elvLobby EQUAL 0 and elevator.status NOT EQUAL MOVING THEN

            CALL elevatorMove() WITH 0

            SET elevator.status TO idle
            

    ELSE

             SET elevator.status TO idle


    END IF




DEFINE